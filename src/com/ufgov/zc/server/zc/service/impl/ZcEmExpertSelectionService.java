package com.ufgov.zc.server.zc.service.impl;import java.math.BigDecimal;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.MainSubBill;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.zc.model.EmCallExpertRecord;import com.ufgov.zc.common.zc.model.EmEvaluationCondition;import com.ufgov.zc.common.zc.model.EmExpert;import com.ufgov.zc.common.zc.model.EmExpertBillFilter;import com.ufgov.zc.common.zc.model.EmExpertEvaluation;import com.ufgov.zc.common.zc.model.EmExpertSelectionBill;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.server.system.dao.ibatis.WorkflowDao;import com.ufgov.zc.server.system.print.PrintManager;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.dao.IBaseDao;import com.ufgov.zc.server.zc.service.IZcEmExpertSelectionService;public class ZcEmExpertSelectionService implements IZcEmExpertSelectionService {  private IBaseDao baseDao;  private WorkflowDao workflowDao;  private WFEngineAdapter wfEngineAdapter;  public List getList(ElementConditionDto dto, RequestMeta requestMeta) {    //    dto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(dto.getWfcompoId(),    //      NumLimConstants.FWATCH));    return baseDao.query("EmExpertSelectionBill.list", dto);  }  public EmExpertSelectionBill getModel(Map map, RequestMeta requestMeta) {    return (EmExpertSelectionBill) baseDao.read("EmExpertSelectionBill.read", map);  }  public EmExpertSelectionBill newCommitFN(EmExpertSelectionBill currentObject, boolean isFromList, RequestMeta requestMeta) throws Exception {    if (!isFromList) {      this.updateExpertSelection(currentObject, requestMeta);    }    wfEngineAdapter.newCommit(currentObject.getComment(), currentObject, requestMeta);    return selectByPrimaryKey(currentObject.getBillCode());  }  public EmExpertSelectionBill auditFN(EmExpertSelectionBill bill, RequestMeta requestMeta) {    wfEngineAdapter.commit(bill.getComment(), bill, requestMeta);    return bill;  }  public EmExpertSelectionBill unAuditFN(EmExpertSelectionBill bill, RequestMeta requestMeta) {    //    Map map = new HashMap();    //    map.put("EM_BILL_CODE", bill.getBillCode());    //baseDao.delete("EmExpertSelectionBill.delete", map);    wfEngineAdapter.rework(bill.getComment(), bill, requestMeta);    return bill;  }  public EmExpertSelectionBill callbackFN(EmExpertSelectionBill bill, RequestMeta requestMeta) {    wfEngineAdapter.callback(bill.getComment(), bill, requestMeta);    return bill;  }  public EmExpertSelectionBill untreadFN(EmExpertSelectionBill bill, RequestMeta requestMeta) {    wfEngineAdapter.untread(bill.getComment(), bill, requestMeta);    return bill;  }  public EmExpertSelectionBill selectByPrimaryKey(String emBillCode) {    Map map = new HashMap();    map.put("EM_BILL_CODE", emBillCode);    EmExpertSelectionBill emExpertSelectionBill = (EmExpertSelectionBill) baseDao.read("EmExpertSelectionBill.read", map);    return emExpertSelectionBill;  }  public EmExpertSelectionBill updateExpertSelection(EmExpertSelectionBill emExpertSelectionBill, RequestMeta requestMeta) throws Exception {    String userId = requestMeta.getSvUserID();    String compoId = requestMeta.getCompoId();    boolean isDraft = false;    if (emExpertSelectionBill.getProcessInstId() == null || emExpertSelectionBill.getProcessInstId().longValue() == -1) {      Long draftid = workflowDao.createDraftId();      emExpertSelectionBill.setProcessInstId(draftid);      isDraft = true;    }    if (isDraft) {      AsWfDraft asWfDraft = new AsWfDraft();      asWfDraft.setCompoId(compoId);      asWfDraft.setWfDraftName(emExpertSelectionBill.getBillCode());      asWfDraft.setUserId(userId);      asWfDraft.setMasterTabId(compoId);      asWfDraft.setWfDraftId(BigDecimal.valueOf(emExpertSelectionBill.getProcessInstId().longValue()));      workflowDao.insertAsWfdraft(asWfDraft);    }    return emExpertSelectionBill;  }  public void delete(Map map, RequestMeta requestMeta) {    baseDao.delete("EmExpertSelectionBill.delete", map);  }  public List getCallExpertRecordList(Map m, RequestMeta requestMeta) {    if ("true".equals((String) m.get("SHOW_INFO"))) {      return baseDao.query("EmCallExpertRecord.listByEmBillCode", m);    } else {      List cerList = baseDao.query("EmCallExpertRecord.listByEmBillCode", m);      if (cerList != null && cerList.size() > 0) {        for (int i = 0; i < cerList.size(); i++) {          EmCallExpertRecord cer = (EmCallExpertRecord) cerList.get(i);          cer.setEmExpert(hideExpertInfo(cer.getEmExpert()));        }      }      return cerList;    }  }  private String hideMobileStr = "***********";  private EmExpert hideExpertInfo(EmExpert e) {    e.setEmExpertCode("******");    e.setEmExpertName("***");    String mobile = e.getEmMobile();    if (mobile != null) {      // 保留后4位手机号      //mobile = "*******" + mobile.subSequence(mobile.length() - 4, mobile.length());      e.setEmMobile(hideMobileStr);    }    return e;  }  public List getExpertEvaluationList(Map m, RequestMeta requestMeta) {    if ("true".equals((String) m.get("SHOW_INFO"))) {      return baseDao.query("EmExpertEvaluation.listByEmBillCode", m);    } else {      List eeList = baseDao.query("EmExpertEvaluation.listByEmBillCode", m);      if (eeList != null && eeList.size() > 0) {        for (int i = 0; i < eeList.size(); i++) {          EmExpertEvaluation ee = (EmExpertEvaluation) eeList.get(i);          ee.setEmExpert(hideExpertInfo(ee.getEmExpert()));        }      }      return eeList;    }  }  public List getPackList(Map m, RequestMeta requestMeta) {    return baseDao.query("EmEvaluationCondition.packListByEmBillCode", m);  }  public List getAllPackListByProjCode(Map m, RequestMeta requestMeta) {    return baseDao.query("EmExpertSelectionBill.packListByProjCode", m);  }  public List getAllExcludeExpertListAuto(Map m, RequestMeta requestMeta) {    return baseDao.query("EmExpertBillFilter.listAllExcludeExpertListAuto", m);  }  public List getEvaluationConditionList(Map m, RequestMeta requestMeta) {    return baseDao.query("EmEvaluationCondition.listByEmBillCode", m);  }  public List getExpertBillFilterList(Map m, RequestMeta requestMeta) {    return baseDao.query("EmExpertBillFilter.listByEmBillCode", m);  }  public List getEmExpertTypeSelectionList(ElementConditionDto dto, RequestMeta requestMeta) {    return baseDao.query("EmExpertType.selectionList", dto);  }  public EmExpertSelectionBill save(EmExpertSelectionBill bill, RequestMeta requestMeta) {    bill.setYear(String.valueOf(requestMeta.getSvNd()));    if (bill.getBillCode() == null || "".equals(bill.getBillCode()) || bill.getBillCode().equals("自动编号")) {      return insert(bill, requestMeta);    } else {      return update(bill);    }  }  public EmExpertSelectionBill insert(EmExpertSelectionBill bill, RequestMeta requestMeta) {    String userId = requestMeta.getSvUserID();    String compoId = requestMeta.getCompoId();    String billCode = NumUtil.getInstance().getNo(compoId, "EM_BILL_CODE", bill);    Long draftid = workflowDao.createDraftId();    bill.setBillCode(billCode);    bill.setInputorId(userId);    bill.setInputorDate(new Date());    bill.setProcessInstId(draftid);    baseDao.insert("EmExpertSelectionBill.insert", bill);    insertEmEvaluationCondition(bill);    insertEmExpertBillFilter(bill);    insertEmPack(bill);    AsWfDraft asWfDraft = new AsWfDraft();    asWfDraft.setCompoId(compoId);    asWfDraft.setWfDraftName(billCode);    asWfDraft.setUserId(userId);    asWfDraft.setMasterTabId(compoId);    asWfDraft.setWfDraftId(BigDecimal.valueOf(draftid.longValue()));    workflowDao.insertAsWfdraft(asWfDraft);    return bill;  }  public void insertEmEvaluationCondition(EmExpertSelectionBill bill) {    List eecList = bill.getExpertEvalConditionList();    if (eecList != null) {      for (int i = 0; i < eecList.size(); i++) {        EmEvaluationCondition eec = (EmEvaluationCondition) eecList.get(i);        eec.setEmBillCode(bill.getBillCode());        eec.setEmYear(bill.getYear());        baseDao.insert("EmEvaluationCondition.insert", eec);      }    }  }  public void insertEmExpertBillFilter(EmExpertSelectionBill bill) {    List eelList = bill.getExcludeExpertList();    if (eelList != null) {      for (int i = 0; i < eelList.size(); i++) {        EmExpertBillFilter ebf = (EmExpertBillFilter) eelList.get(i);        ebf.setEmBillCode(bill.getBillCode());        baseDao.insert("EmExpertBillFilter.insert", ebf);      }    }  }  public void insertEmPack(EmExpertSelectionBill bill) {    List packList = bill.getPackList();    if (packList != null) {      for (int i = 0; i < packList.size(); i++) {        ZcEbPack pack = (ZcEbPack) packList.get(i);        Map map = new HashMap();        map.put("EM_BILL_CODE", bill.getBillCode());        map.put("PROJ_CODE", pack.getProjCode());        map.put("PACK_CODE", pack.getPackCode());        baseDao.insert("EmEvaluationCondition.insertPack", map);      }    }  }  public EmExpertSelectionBill update(EmExpertSelectionBill bill) {    //checkConsistency(proj);    baseDao.update("EmExpertSelectionBill.update", bill);    Map m = new HashMap();    m.put("EM_BILL_CODE", bill.getBillCode());    baseDao.delete("EmEvaluationCondition.deleteByEmBillCode", m);    baseDao.delete("EmExpertBillFilter.deleteByEmBillCode", m);    baseDao.delete("EmEvaluationCondition.deletePackByEmBillCode", m);    insertEmEvaluationCondition(bill);    insertEmExpertBillFilter(bill);    insertEmPack(bill);    return bill;  }  public void updateBillStatus(EmExpertSelectionBill bill, RequestMeta requestMeta) {    Map m = new HashMap();    m.put("EM_BILL_CODE", bill.getBillCode());    m.put("EM_STATUS", bill.getBillStatus());    baseDao.update("EmExpertSelectionBill.updateBillStatus", m);  }  public boolean updateBillServer(Map m, RequestMeta requestMeta) {    Map rlt = (Map) baseDao.read("EmExpertSelectionBill.readBillServer", m);    if (rlt == null) {      baseDao.insert("EmExpertSelectionBill.insertBillServer", m);      //return true;    } else {      baseDao.update("EmExpertSelectionBill.updateBillServer", m);      //return true;    }    return true;  }  public PrintObject genEmExpertEvaluationPrintObject(EmExpertSelectionBill currentBill, RequestMeta requestMeta) {    MainSubBill mainSubBill = new MainSubBill();    mainSubBill.setMainBill(currentBill);    Map m = new HashMap();    m.put("EM_BILL_CODE", currentBill.getBillCode());    if ("fprint".equals(requestMeta.getFuncId())) {      m.put("SHOW_INFO", "true");    } else if ("fprint_preview".equals(requestMeta.getFuncId())) {      m.put("SHOW_INFO", "false");    }    mainSubBill.setSubBillList(getExpertEvaluationList(m, requestMeta));    return PrintManager.genMainSubPrintObject(mainSubBill);  }  public IBaseDao getBaseDao() {    return baseDao;  }  public void setBaseDao(IBaseDao baseDao) {    this.baseDao = baseDao;  }  public WorkflowDao getWorkflowDao() {    return workflowDao;  }  public void setWorkflowDao(WorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }}