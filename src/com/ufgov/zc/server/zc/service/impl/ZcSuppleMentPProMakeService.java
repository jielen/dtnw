/**   * @(#) project: zcxa* @(#) file: ZcSuppleMentPProMakeService.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.server.zc.service.impl;import java.math.BigDecimal;import java.util.List;import java.util.Map;import com.kingdrive.workflow.context.WorkflowContext;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.zc.model.ZcPProMake;import com.ufgov.zc.common.zc.model.ZcPProMitem;import com.ufgov.zc.common.zc.model.ZcPProMitemBi;import com.ufgov.zc.common.zc.model.ZcPProMitemBiExample;import com.ufgov.zc.common.zc.model.ZcPProMitemExample;import com.ufgov.zc.common.zc.model.ZcSuppleMentBi;import com.ufgov.zc.common.zc.model.ZcSupplementPProMake;import com.ufgov.zc.server.budget.util.BudgetUtil;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.ZcSUtil;import com.ufgov.zc.server.zc.dao.IBaseDao;import com.ufgov.zc.server.zc.dao.IZcEbEntrustDao;import com.ufgov.zc.server.zc.dao.IZcPProMakeDao;import com.ufgov.zc.server.zc.dao.IZcPProMitemBiDao;import com.ufgov.zc.server.zc.dao.IZcPProMitemDao;import com.ufgov.zc.server.zc.dao.IZcSuppleMentBiDao;import com.ufgov.zc.server.zc.dao.IZcSuppleMentPProMakeDao;import com.ufgov.zc.server.zc.service.IZcPProMakeService;import com.ufgov.zc.server.zc.service.IZcSuppleMentPProMakeService;/*** @ClassName: ZcSuppleMentPProMakeService* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2010-7-29 下午02:23:11* @version: V1.0 * @since: 1.0* @author: Administrator* @modify: */public class ZcSuppleMentPProMakeService implements IZcSuppleMentPProMakeService {  private IZcPProMakeDao zcPProMakeDao;  private IZcPProMitemDao zcPProMitemDao;  private IZcPProMitemBiDao zcPProMitemBiDao;  private WFEngineAdapter wfEngineAdapter;  private IZcEbEntrustDao zcEbEntrustDao;  private IWorkflowDao workflowDao;  private IZcSuppleMentPProMakeDao zcSuppleMentPProMakeDao;    private IZcPProMakeService zcPProMakeService;    private IBaseDao baseDao;  public IBaseDao getBaseDao() {    return baseDao;  }  public void setBaseDao(IBaseDao baseDao) {    this.baseDao = baseDao;  }  public IZcSuppleMentBiDao getZcSuppleMentBiDao() {    return zcSuppleMentBiDao;  }  public void setZcSuppleMentBiDao(IZcSuppleMentBiDao zcSuppleMentBiDao) {    this.zcSuppleMentBiDao = zcSuppleMentBiDao;  }  private IZcSuppleMentBiDao zcSuppleMentBiDao;  public IZcSuppleMentPProMakeDao getZcSuppleMentPProMakeDao() {    return zcSuppleMentPProMakeDao;  }  public void setZcSuppleMentPProMakeDao(IZcSuppleMentPProMakeDao zcSuppleMentPProMakeDao) {    this.zcSuppleMentPProMakeDao = zcSuppleMentPProMakeDao;  }  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  public IZcPProMakeDao getZcPProMakeDao() {    return zcPProMakeDao;  }  public void setZcPProMakeDao(IZcPProMakeDao zcPProMakeDao) {    this.zcPProMakeDao = zcPProMakeDao;  }  public IZcPProMitemDao getZcPProMitemDao() {    return zcPProMitemDao;  }  public void setZcPProMitemDao(IZcPProMitemDao zcPProMitemDao) {    this.zcPProMitemDao = zcPProMitemDao;  }  public IZcPProMitemBiDao getZcPProMitemBiDao() {    return zcPProMitemBiDao;  }  public void setZcPProMitemBiDao(IZcPProMitemBiDao zcPProMitemBiDao) {    this.zcPProMitemBiDao = zcPProMitemBiDao;  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public IZcEbEntrustDao getZcEbEntrustDao() {    return zcEbEntrustDao;  }  public void setZcEbEntrustDao(IZcEbEntrustDao zcEbEntrustDao) {    this.zcEbEntrustDao = zcEbEntrustDao;  }  public ZcSupplementPProMake auditFN(ZcSupplementPProMake make, RequestMeta requestMeta) {    wfEngineAdapter.commit(make.getComment(), make, requestMeta);    return make;  }  public ZcSupplementPProMake callbackFN(ZcSupplementPProMake make, RequestMeta requestMeta) {    WorkflowContext workflowContext = wfEngineAdapter.genCommonWFC(make.getComment(), make, requestMeta);    wfEngineAdapter.callback(workflowContext);    return make;  }  public ZcSupplementPProMake newCommitFN(ZcSupplementPProMake currentObject, RequestMeta requestMeta)  throws Exception {    wfEngineAdapter.newCommit(currentObject.getComment(), currentObject, requestMeta);    return currentObject;  }  public ZcSupplementPProMake updateZcSupplementPProMake(ZcSupplementPProMake zcSuppleMentPProMake,  RequestMeta requestMeta) throws Exception {    List biList = zcSuppleMentPProMake.getSuppleMentBiList();    if (biList == null || biList.size() == 0)      throw new RuntimeException("追加资金不可为空");    String userId = requestMeta.getSvUserID();    String compoId = requestMeta.getCompoId();    boolean isDraft = false;    BudgetUtil bu = new BudgetUtil();    Map map = null;        if (zcSuppleMentPProMake.getProcessInstId() == null    || zcSuppleMentPProMake.getProcessInstId().longValue() == -1) {      Long draftid = workflowDao.createDraftId();      zcSuppleMentPProMake.setProcessInstId(draftid);      isDraft = true;    }    if ("".equals(ZcSUtil.safeString(zcSuppleMentPProMake.getZcSuppleMentCode()))    || zcSuppleMentPProMake.getZcSuppleMentCode().equals("自动编号")) {      String code = NumUtil.getInstance().getNo(compoId, "ZC_SUPPLEMENT_CODE", zcSuppleMentPProMake);      zcSuppleMentPProMake.setZcSuppleMentCode(code);      zcSuppleMentPProMakeDao.insertZcSupplementPProMake(zcSuppleMentPProMake);      map = bu.getSaveBudgetByZcpproMake(zcPProMitemBiDao, baseDao, ZcSUtil.isUseBi(), code, biList);            for (int i = 0; i < biList.size(); i++) {        ZcPProMitemBi bi = (ZcPProMitemBi) biList.get(i);        bi.setZcMakeCode(code);        zcPProMitemBiDao.insert(bi);      }    } else {      String code = zcSuppleMentPProMake.getZcSuppleMentCode();      zcSuppleMentPProMakeDao.updateZcSupplementPProMake(zcSuppleMentPProMake);            map = bu.getSaveBudgetByZcpproMake(zcPProMitemBiDao, baseDao, ZcSUtil.isUseBi(), code, biList);            ZcPProMitemBiExample bi = new ZcPProMitemBiExample();      bi.createCriteria().andZcMakeCodeEqualTo(code);      zcPProMitemBiDao.deleteByExample(bi);            for (int i = 0; i < biList.size(); i++) {        ZcPProMitemBi mbi = (ZcPProMitemBi) biList.get(i);        mbi.setZcMakeCode(code);        zcPProMitemBiDao.insert(mbi);      }    }    if (isDraft) {      AsWfDraft asWfDraft = new AsWfDraft();      asWfDraft.setCompoId(compoId);      asWfDraft.setWfDraftName(zcSuppleMentPProMake.getZcMakeCode());      asWfDraft.setUserId(userId);      asWfDraft.setMasterTabId(compoId);      asWfDraft.setWfDraftId(BigDecimal.valueOf(zcSuppleMentPProMake.getProcessInstId().longValue()));      workflowDao.insertAsWfdraft(asWfDraft);    }    bu.callService(map, requestMeta.getSvNd());        return zcSuppleMentPProMake;  }  public ZcPProMake updateZcPProMake(ZcPProMake bean) {    ZcPProMake originalBean = this.getMake(bean.getZcMakeCode());    ZcSUtil.checkDigest(bean, originalBean, "zcMakeCode");//一致性校验    zcPProMakeDao.updateByPrimaryKey(bean);    setMxExample(bean.getZcMakeCode());    //    List biList=bean.getBiList();    List itemList = bean.getItemList();    //    zcPProMitemBiDao.deleteByExample(bi);    zcPProMitemDao.deleteByExample(item);    //    for (int i = 0; i < biList.size(); i++) {    //      ZcPProMitemBi bi = (ZcPProMitemBi) biList.get(i);    //      bi.setZcMakeCode(bean.getZcMakeCode());    //      bi.setZcBiNo(i + "");    //      zcPProMitemBiDao.insert(bi);    //      }    for (int i = 0; i < itemList.size(); i++) {      ZcPProMitem item = (ZcPProMitem) itemList.get(i);      item.setZcMakeCode(bean.getZcMakeCode());      item.setZcPitemCode(new BigDecimal(i));      zcPProMitemDao.insert(item);    }    return bean;  }  public ZcSupplementPProMake getZcSupplementPProMake(String zcSuppleMentCode, RequestMeta requestMeta)  throws Exception {    ZcSupplementPProMake bean = zcSuppleMentPProMakeDao.getZcSupplementPProMake(zcSuppleMentCode);    ZcPProMake zcPProMake = getMake(bean.getZcMakeCode());    List biList = zcPProMakeService.getZcPProMitemBi(bean.getZcSuppleMentCode(),ZcSUtil.isUseBi());    bean.setSuppleMentBiList(biList);    bean.setZcPProMake(zcPProMake);    bean.setDbDigest(bean.digest());    return bean;  }  public void deleteZcSupplementPProMake(ZcSupplementPProMake zcSupplementPProMake, RequestMeta requestMeta)  throws Exception {    zcSuppleMentPProMakeDao.deleteZcSupplementPProMake(zcSupplementPProMake.getZcSuppleMentCode());    zcSuppleMentBiDao.deleteBiByBalId(zcSupplementPProMake.getZcSuppleMentCode());        BudgetUtil bu = new BudgetUtil();    Map map = bu.getDelBudget(zcPProMitemBiDao, ZcSUtil.isUseBi(), zcSupplementPProMake.getZcSuppleMentCode());    ZcPProMitemBiExample bi = new ZcPProMitemBiExample();    bi.createCriteria().andZcMakeCodeEqualTo(zcSupplementPProMake.getZcSuppleMentCode());    zcPProMitemBiDao.deleteByExample(bi);    if (ZcSUtil.isUseBi()) {      bu.callService(map, requestMeta.getSvNd());    }  }  public List getZcSupplementPProMakeList(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    List suppleMentList = zcSuppleMentPProMakeDao.getZcSupplementPProMakeList(elementConditionDto);    for (int i = 0; i < suppleMentList.size(); i++) {      ZcSupplementPProMake bean = (ZcSupplementPProMake) suppleMentList.get(i);      ZcPProMake zcPProMake = (ZcPProMake) zcPProMakeDao.selectByPrimaryKey(bean.getZcMakeCode());      //      List list = zcSuppleMentBiDao.getBiList(bean.getZcSuppleMentCode());      //      bean.setSuppleMentBiList(list);      bean.setZcPProMake(zcPProMake);      bean.setDbDigest(bean.digest());    }    return suppleMentList;  }  public ZcPProMake getMake(String zcMakeCode) {    return zcPProMakeService.selectByPrimaryKey(zcMakeCode);  }  public ZcSupplementPProMake unAuditFN(ZcSupplementPProMake make, RequestMeta requestMeta) {    wfEngineAdapter.rework(make.getComment(), make, requestMeta);    return make;  }  public ZcSupplementPProMake untreadFN(ZcSupplementPProMake make, RequestMeta requestMeta) {    wfEngineAdapter.untread(make.getComment(), make, requestMeta);    return make;  }  private ZcPProMitemBiExample bi;  private ZcPProMitemExample item;  private void setMxExample(String code) {    bi = new ZcPProMitemBiExample();    bi.createCriteria().andZcMakeCodeEqualTo(code);    item = new ZcPProMitemExample();    item.createCriteria().andZcMakeCodeEqualTo(code);  }  public BigDecimal getSumSuppleMentAmountSum(Map map, RequestMeta requestMeta) {    return zcSuppleMentBiDao.getSumBiSum(map);  }  public IZcPProMakeService getZcPProMakeService() {    return zcPProMakeService;  }  public void setZcPProMakeService(IZcPProMakeService zcPProMakeService) {    this.zcPProMakeService = zcPProMakeService;  } }